generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  username     String   @unique
  email        String   @unique
  phone        String
  password     String
    role         Role     @default(USER)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?

  refreshToken String?   // nullable, stores latest refresh token
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  USER
  RESTAURANT_ADMIN
  SUPERADMIN
}
model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phone       String
  admins  User[] 
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
// model Menu {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String
//   price       Float
//   restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
//   restaurantId Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
// model Order {
//   id          Int      @id @default(autoincrement())
//   user        User     @relation(fields: [userId], references: [id])
//   userId      Int
//   restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
//   restaurantId Int
//   total       Float
//   status      OrderStatus @default(PENDING)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
// model OrderItem {
//   id        Int    @id @default(autoincrement())
//   order     Order  @relation(fields: [orderId], references: [id])         
//   orderId   Int
//   menu      Menu   @relation(fields: [menuId], references: [id])    
//   menuId    Int
//   quantity  Int
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
